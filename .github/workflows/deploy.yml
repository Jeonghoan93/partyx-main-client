name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  cleanup_artifacts:
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: sudo apt-get install jq

      - name: Delete old artifacts
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -X GET "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
          | jq '.artifacts[].id' \
          | xargs -I {} curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                            -X DELETE "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/{}"

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache yarn dependencies
        uses: actions/cache@v2
        with:
          path: react/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Debug - List Root Directory Content
        run: ls -la ${{ github.workspace }}/react/

      - name: Install and Build
        run: |
          cd ${{ github.workspace }}/react
          yarn install 
          yarn build

      - name: List build directory content
        run: ls -la ${{ github.workspace }}/react/dist/

      - name: Archieve production artifacts
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ${{ github.workspace }}/react/dist/
          retention-days: 7

  deploy:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download production artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: ${{ github.workspace }}/downloaded_artifacts

      - name: List contents of downloaded artifacts
        run: ls -la ${{ github.workspace }}/downloaded_artifacts/

      - name: Configure AWS CLI
        run: aws configure set region eu-north-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to S3 using AWS CLI
        run: |
          aws s3 sync ${{ github.workspace }}/downloaded_artifacts/ s3://partyx-frontend/ --acl bucket-owner-full-control
        env:
          AWS_S3_BUCKET: "partyx-frontend"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-north-1"

      - name: Invalidate CloudFront Distribution
        run: |
          aws cloudfront create-invalidation --distribution-id E1KAIII2BCH8CW --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-north-1"
